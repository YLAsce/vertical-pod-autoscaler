考虑OOM与否能使问题变为offline的
区别OOM的原因：是memory leak还是只是短期的spike

为了检测OOM，需要让request=limit。这个具体是为什么？问一下  OK了，是node的linux系统限制
CPU不能设置request=limit?否则throttle就有永远也放不大的问题。见图Figure_OOM系列
但是为什么原始rule的就没有这个问题。。。可能问题出在采样权重上

每秒钟是不是一定有一条数据被记录，所以OOM需要尽快重启，否则现在的CPU权重也会跟着改变。 CPU权重改变的影响？在公式中能看出来什么？目前看貌似是有限的。。

OOM的数据来源是observer中OnUpdate那一个分支，处理的是OOMKill再重启的事件。不知道为什么不会走Evicted的事件。。Evicted可能是彻底删的事件吧？先不往深了看了

OOM规则第一次调用之后，不能成功拉起

现在的实现循环有问题，如果一次bump up不能成功运行，那么就永远不会了。改善robustness