---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - watch
      - list
  - nonResourceURLs: ["/metrics"]
    verbs:
      - get
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitor
  labels:
    app: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: monitor
roleRef:
  kind: ClusterRole
  name: prometheus
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-conf
  namespace: monitor
  labels:
    app: prometheus
data:
  prometheus.yml: |-
    # my global config
    global:
      scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).

    scrape_configs:
      - job_name: 'kubernetes-cadvisor'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: replace
          target_label: __address__
          replacement: kubernetes.default.svc:443
        - action: replace
          source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

      - job_name: 'kubernetes-gpu'
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: nvidia-dcgm-exporter
          - source_labels: [__meta_kubernetes_namespace]
            action: keep
            regex: kube-system
          - source_labels: [__meta_kubernetes_service_port_number]
            action: keep
            regex: '9400'
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: prometheus-rules
#   namespace: monitor
#   labels:
#     app: prometheus
# data:
#   cpu-usage.rule: |
#     groups:
#       - name: NodeCPUUsage
#         rules:
#           - alert: NodeCPUUsage
#             expr: (100 - (avg by (instance) (irate(node_cpu{name="node-exporter",mode="idle"}[5m])) * 100)) > 75
#             for: 2m
#             labels:
#               severity: "page"
#             annotations:
#               summary: "{{$labels.instance}}: High CPU usage detected"
#               description: "{{$labels.instance}}: CPU usage is above 75% (current value is: {{ $value }})"
# ---
# DELETED PERSISTENT VOLUME
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: "prometheus-data-pv"
#   labels:
#     name: prometheus-data-pv
#     release: stable
# spec:
#   capacity:
#     storage: 5Gi
#   accessModes:
#     - ReadWriteOnce
#   persistentVolumeReclaimPolicy: Recycle
#   nfs:
#     path: /nfs/prometheus/data
#     server: 192.168.228.128

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: prometheus-data-pvc
#   namespace: monitor
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 5Gi
#   selector:
#     matchLabels:
#       name: prometheus-data-pv
#       release: stable

---
kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    app: prometheus
  name: prometheus
  namespace: monitor
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsUser: 0
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          imagePullPolicy: IfNotPresent
          volumeMounts:
            # - mountPath: /prometheus
            #   name: prometheus-data-volume
            - mountPath: /etc/prometheus/prometheus.yml
              name: prometheus-conf-volume
              subPath: prometheus.yml
            # - mountPath: /etc/prometheus/rules
            #   name: prometheus-rules-volume
          ports:
            - containerPort: 9090
              protocol: TCP
      volumes:
        # - name: prometheus-data-volume
          #persistentVolumeClaim:
          #  claimName: prometheus-data-pvc
        - name: prometheus-conf-volume
          configMap:
            name: prometheus-conf
        # - name: prometheus-rules-volume
        #   configMap:
        #     name: prometheus-rules
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule

---
kind: Service
apiVersion: v1
metadata:
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port:   '9090'
  labels:
    app: prometheus
  name: prometheus-service
  namespace: monitor
spec:
  ports:
    - port: 9090
      targetPort: 9090
  selector:
    app: prometheus
  type: LoadBalancer
